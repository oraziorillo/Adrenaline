@startuml

title __MODEL's Class Diagram__\n

  namespace server {
    namespace model {
      class server.model.AmmoTile {
          - ammo : short[]
          - hasPowerUp : boolean
          + AmmoTile()
          + convertToDTO()
          + getAmmo()
          + hasPowerUp()
          + toString()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.Deck {
          - cards : List<E>
          - random : Random
          + Deck()
          + add()
          + draw()
          + equals()
          + getCards()
          + hashCode()
          + print()
          + setCards()
          + size()
          # clone()
          ~ contains()
          ~ shuffle()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.Effect {
          - actions : List<Action>
          - asynchronous : boolean
          - beyondWalls : boolean
          - cost : short[]
          - memorizeTargetSquare : boolean
          - oriented : boolean
          - sameTarget : boolean
          + Effect()
          + assignDirection()
          + execute()
          + getActionAtIndex()
          + getActions()
          + getCost()
          + hasSameTarget()
          + isAsynchronous()
          + isOriented()
          + memorizeTargetSquare()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.Game {
          - ammoDeck : Deck<AmmoTile>
          - finalFrenzy : boolean
          - pcs : Set<Pc>
          - powerUpsDeck : Deck<PowerUpCard>
          - preLoadedGameBoards : GameBoard[]
          - weaponsDeck : Deck<WeaponCard>
          + addModelEventListener()
          + addModelEventListener()
          + addPc()
          + computeWinner()
          + convertToDTO()
          {static} + getGame()
          + getPc()
          + getSpawnPoint()
          + getSquare()
          + initKillShotTrack()
          + initMap()
          + isFinalFrenzy()
          + preLoadedGameBoardToString()
          + removeListener()
          + restore()
          + scoreDeath()
          + setFinalFrenzy()
          + setTargetableSquares()
          ~ drawPowerUp()
          ~ killOccurred()
          - Game()
          - initAmmoDeck()
          - initDecks()
          - initPowerUpsDeck()
          - initWeaponsDeck()
          - pointsFromKillShots()
          - pointsOnKillShotTrack()
          - preLoadGameBoards()
          - scoreOnKillShotTrack()
          - scoringPoints()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.GameBoard {
          - columns : int
          - doors : int[]
          - numberOfMap : int
          - rows : int
          - spawnPoints : List<Square>
          - squares : List<Square>
          + GameBoard()
          + convertToDTO()
          + getColumns()
          + getFinalFrenzyKillShotTrackArray()
          + getKillShotTrack()
          + getKillShotTrackArray()
          + getNumberOfMap()
          + getRows()
          + getSpawnPoints()
          + getSquares()
          + setNumberOfMap()
          ~ addModelEventHandler()
          ~ getSpawnPoint()
          ~ getSquare()
          ~ init()
          ~ initKillShotTrack()
          ~ killOccurred()
          ~ simplifiedToString()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.KillShot {
          - overkilled : boolean
          - skulled : boolean
          + convertToDTO()
          ~ KillShot()
          ~ getColour()
          ~ isOverkilled()
          ~ isSkulled()
          ~ killOccurred()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.KillShotTrack {
          - currentKillShotTrackIndex : int
          - finalFrenzyCurrentKillShotTrackIndex : int
          - finalFrenzyKillShotTrack : KillShot[]
          - killShotTrack : KillShot[]
          + KillShotTrack()
          + convertToDTO()
          + getFinalFrenzyKillShotTrack()
          + getKillShotTrack()
          + killOccured()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.ModelEventHandler {
          - listeners : Caterpillar<UUID, PcColourEnum, ModelEventListener>
          + fireEvent()
          + fireEvent()
          + notifyDamaged()
          ~ ModelEventHandler()
          ~ addListenerColour()
          ~ addModelEventListener()
          ~ fireEvent()
          ~ fireEvent()
          ~ fireEvent()
          ~ removeListener()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.Pc {
          - adrenaline : short
          - powerUps : ArrayList<PowerUpCard>
          - weapons : WeaponCard[]
          + Pc()
          + addAmmo()
          + addModelEventHandler()
          + addWeapon()
          + collect()
          + convertToDTO()
          + discardPowerUp()
          + drawPowerUp()
          + flipBoard()
          + getAdrenaline()
          + getAmmo()
          + getColour()
          + getCurrSquare()
          + getDamageTrack()
          + getName()
          + getPcBoard()
          + getPowerUpCard()
          + getPowerUps()
          + getWeapons()
          + hasAtLeastOneAvailableAmmo()
          + hasEnoughAmmo()
          + hasMaxPowerUpNumber()
          + increaseNumberOfDeaths()
          + increasePoints()
          + isFullyArmed()
          + moveTo()
          + notifyDamageMarks()
          + payAmmo()
          + resetPowerUpAsAmmo()
          + setCurrGame()
          + setCurrSquare()
          + spawn()
          + takeDamage()
          + takeMarks()
          + toString()
          + weaponAtIndex()
          - convertPowerUpsDTO()
          - convertWeaponsDTO()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.PcBoard {
          - ammo : short[]
          - damageTrack : PcColourEnum[]
          - damageTrackIndex : short
          - marks : short[]
          - numOfDeaths : int
          - pcValue : int[]
          - points : short
          + addAmmo()
          + addDamage()
          + addMarks()
          + convertToDTO()
          + flipBoard()
          + getAmmo()
          + getColour()
          + getDamageTrack()
          + getDamageTrackIndex()
          + getMarks()
          + getNumOfDeaths()
          + getPcValue()
          + getPoints()
          + hasAtLeastOneAmmo()
          + increaseNumberOfDeaths()
          + increasePoints()
          + payAmmo()
          + resetDamageTrack()
          ~ PcBoard()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.PowerUpCard {
          - name : String
          - selectedAsAmmo : boolean
          + PowerUpCard()
          + convertToDTO()
          + getAction()
          + getColour()
          + getName()
          + isSelectedAsAmmo()
          + setSelectedAsAmmo()
          + toString()
          + useAction()
      }
    }
  }
  

  namespace server {
    namespace model {
      class server.model.WeaponCard {
          - ammo : short[]
          - chained : boolean
          - currentCost : short[]
          - effectsToApply : LinkedList<Effect>
          - fireModes : List<Effect>
          - loaded : boolean
          - name : String
          - upgrades : List<Effect>
          + WeaponCard()
          + addUpgrade()
          + ammoToString()
          + convertToDTO()
          + getAmmo()
          + getColour()
          + getCurrentCost()
          + getEffectsToApply()
          + getFireModeSize()
          + getFireModes()
          + getName()
          + getUpgrades()
          + getUpgradesSize()
          + init()
          + isChained()
          + isLoaded()
          + pushFirstUpgrade()
          + reset()
          + selectFireMode()
          + setLoaded()
          + toString()
          ~ WeaponCard()
      }
    }
  }
  

  server.model.Game o-- server.model.ModelEventHandler : events
  server.model.Game o-- server.model.GameBoard : gameBoard
  server.model.GameBoard o-- server.model.KillShotTrack : killShotTrack
  server.model.KillShot o-- common.enums.PcColourEnum : colour
  server.model.Pc o-- common.enums.PcColourEnum : colour
  server.model.Pc o-- server.model.Game : currGame
  server.model.Pc o-- server.model.squares.Square : currSquare
  server.model.Pc o-- server.model.ModelEventHandler : events
  server.model.Pc o-- server.model.PcBoard : pcBoard
  server.model.PcBoard o-- common.enums.PcColourEnum : colour
  server.model.PowerUpCard o-- server.model.actions.Action : action
  server.model.PowerUpCard o-- common.enums.AmmoEnum : colour
  server.model.WeaponCard o-- common.enums.AmmoEnum : colour


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
