@startuml

title __STATES's Class Diagram__\n

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.EndTurnState {
            - toReload : boolean
            + forcePass()
            + nextState()
            + pass()
            + reload()
            ~ EndTurnState()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.FirstTurnState {
            - powerUpToDropIndex : int
            + forcePass()
            + nextState()
            + ok()
            + selectPowerUp()
            ~ FirstTurnState()
            - spawn()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.GrabStuffState {
            - targetableSquares : Set<Square>
            - undo : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectPowerUp()
            + selectSquare()
            + selectWeaponOfMine()
            + selectWeaponOnBoard()
            + undo()
            ~ GrabStuffState()
            ~ setTargetableToValidSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.InactiveState {
            {static} + PC_SELECTION_STATE : int
            {static} ~ FIRST_TURN_STATE : int
            {static} ~ START_TURN_STATE : int
            - hasToRespawn : boolean
            - nextState : int
            - numberOfTagbackGrenades : int
            - powerUpTimer : Timer
            - wantToUseTagbackGrenade : boolean
            + InactiveState()
            + checkTagbackGrenadeConditions()
            + forcePass()
            + isInactive()
            + nextState()
            + response()
            + selectPowerUp()
            + setHasToRespawn()
            + useFirstTagbackGrenade()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.PcSelectionState {
            - pcColour : String
            + forcePass()
            + nextState()
            + ok()
            + selectPcColour()
            ~ PcSelectionState()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.ReloadState {
            + forcePass()
            + nextState()
            + ok()
            + pass()
            + selectPowerUp()
            + selectWeaponOfMine()
            ~ ReloadState()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.RespawnState {
            - powerUpIndex : int
            + forcePass()
            + nextState()
            + ok()
            + selectPowerUp()
            ~ RespawnState()
            - recordDeath()
            - respawn()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.RunAroundState {
            - targetableSquares : Set<Square>
            - undo : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectSquare()
            + undo()
            ~ RunAroundState()
            ~ setTargetableToValidSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.SetupKillShotTrackState {
            - killShotTrackIndex : int
            + forcePass()
            + nextState()
            + ok()
            + selectNumberOfSkulls()
            ~ SetupKillShotTrackState()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.SetupMapState {
            - mapIndex : int
            + SetupMapState()
            + forcePass()
            + nextState()
            + ok()
            + selectMap()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.SetupWeaponState {
            - asynchronousUpgradeIndex : int
            - fireModeIndex : int
            - moved : boolean
            - undo : boolean
            - waiting : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectPowerUp()
            + selectUpgrade()
            + setAsynchronousEffectOrder()
            + switchFireMode()
            + undo()
            ~ SetupWeaponState()
            - sumArray()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.ShootPeopleState {
            - moved : boolean
            - reloadDone : boolean
            - targetableSquares : Set<Square>
            - undo : boolean
            - wantsToReload : boolean
            - weaponSelected : boolean
            + forcePass()
            + nextState()
            + ok()
            + reload()
            + selectSquare()
            + selectWeaponOfMine()
            + undo()
            ~ ShootPeopleState()
            ~ setTargetableToValidSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.StartTurnState {
            + forcePass()
            + grabStuff()
            + nextState()
            + runAround()
            + shootPeople()
            + usePowerUp()
            ~ StartTurnState()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        abstract class server.controller.states.State {
            + checkTagbackGrenadeConditions()
            + forcePass()
            + getCurrPc()
            + grabStuff()
            + isInactive()
            {abstract} + nextState()
            + ok()
            + pass()
            + reload()
            + removeListener()
            + response()
            + runAround()
            + selectAmmo()
            + selectDirection()
            + selectMap()
            + selectNumberOfSkulls()
            + selectPcColour()
            + selectPowerUp()
            + selectSquare()
            + selectTarget()
            + selectUpgrade()
            + selectWeaponOfMine()
            + selectWeaponOnBoard()
            + sendChatMessage()
            + setAsynchronousEffectOrder()
            + setHasToRespawn()
            + shootPeople()
            + skip()
            + spawnPc()
            + switchFireMode()
            + undo()
            + usePowerUp()
            ~ State()
            ~ setTargetableToValidSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.TargetSelectionState {
            - actionIndex : int
            - directionSelected : boolean
            - effectIndex : int
            - effectsToApply : List<Effect>
            - moved : boolean
            - shotTargets : LinkedList<Pc>
            - targetableSquares : Set<Square>
            - targetsShotTwice : LinkedList<Pc>
            - undo : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectDirection()
            + selectSquare()
            + selectTarget()
            + skip()
            + undo()
            ~ TargetSelectionState()
            ~ setTargetableToValidSquares()
            - checkIfOriented()
            - executeEffect()
            - hasNextAction()
            - nextAction()
            - setAction()
            - setDeadPlayers()
            - setTargettableSquares()
            - validateSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.UsePowerUpState {
            - targetableSquares : Set<Square>
            - undo : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectPowerUp()
            + selectSquare()
            + selectTarget()
            + undo()
            ~ UsePowerUpState()
            ~ setTargetableToValidSquares()
        }
      }
    }
  }
  

  namespace server {
    namespace controller {
      namespace states {
        class server.controller.states.UseTargetingScopeState {
            - targetablePcs : List<Pc>
            - undo : boolean
            + forcePass()
            + nextState()
            + ok()
            + selectAmmo()
            + selectPowerUp()
            + selectTarget()
            + skip()
            + undo()
            ~ UseTargetingScopeState()
            - payAmmo()
            - settingNextState()
        }
      }
    }
  }
  

  server.controller.states.EndTurnState -up-|> server.controller.states.State
  server.controller.states.FirstTurnState -up-|> server.controller.states.State
  server.controller.states.FirstTurnState o-- server.model.Pc : pcToSpawn
  server.controller.states.GrabStuffState -up-|> server.controller.states.State
  server.controller.states.GrabStuffState o-- server.model.squares.Square : targetSquare
  server.controller.states.InactiveState -up-|> server.controller.states.State
  server.controller.states.InactiveState o-- server.model.Pc : damagedPc
  server.controller.states.PcSelectionState -up-|> server.controller.states.State
  server.controller.states.ReloadState -up-|> server.controller.states.State
  server.controller.states.ReloadState o-- server.model.WeaponCard : weaponToReload
  server.controller.states.RespawnState -up-|> server.controller.states.State
  server.controller.states.RespawnState o-- server.controller.Player : deadPlayer
  server.controller.states.RunAroundState -up-|> server.controller.states.State
  server.controller.states.RunAroundState o-- server.model.squares.Square : targetSquare
  server.controller.states.SetupKillShotTrackState -up-|> server.controller.states.State
  server.controller.states.SetupMapState -up-|> server.controller.states.State
  server.controller.states.SetupWeaponState -up-|> server.controller.states.State
  server.controller.states.ShootPeopleState -up-|> server.controller.states.State
  server.controller.states.ShootPeopleState o-- server.model.squares.Square : targetSquare
  server.controller.states.StartTurnState -up-|> server.controller.states.State
  server.controller.states.StartTurnState o-- server.controller.states.State : nextState
  server.controller.states.State o-- server.controller.Controller : controller
  server.controller.states.TargetSelectionState -up-|> server.controller.states.State
  server.controller.states.TargetSelectionState o-- server.model.actions.Action : currAction
  server.controller.states.TargetSelectionState o-- server.model.Effect : currEffect
  server.controller.states.TargetSelectionState o-- server.model.squares.Square : squareToMemorize
  server.controller.states.UsePowerUpState -up-|> server.controller.states.State
  server.controller.states.UsePowerUpState o-- server.model.actions.Action : currAction
  server.controller.states.UsePowerUpState o-- server.model.PowerUpCard : currPowerUp
  server.controller.states.UseTargetingScopeState -up-|> server.controller.states.State
  server.controller.states.UseTargetingScopeState o-- common.enums.AmmoEnum : ammoToUse
  server.controller.states.UseTargetingScopeState o-- server.model.actions.Action : currAction
  server.controller.states.UseTargetingScopeState o-- server.model.PowerUpCard : currPowerUp
  server.controller.states.UseTargetingScopeState o-- server.model.PowerUpCard : powerUpSelectedAsAmmo


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
