@startuml

title __DATABASE's Class Diagram__\n

  namespace server {
    namespace database {
      class server.database.CustomizedHashMap {
          - primaryKeys : ArrayList<P>
          - secondaryKeys : ArrayList<S>
          - values : ArrayList<V>
          + CustomizedHashMap()
          + get()
          + getPrimaryAtIndex()
          + getPrimaryKey()
          + getSecondaryKey()
          + insertSK()
          + primaryKeySet()
          + put()
          + removeLine()
          + secondaryKeySet()
          + values()
      }
    }
  }
  

  namespace server {
    namespace database {
      class server.database.DatabaseHandler {
          - deckType : Type
          - gamePathByUUID : HashMap<UUID, String>
          - gson : Gson
          {static} - instance : DatabaseHandler
          - playerInfoByToken : HashMap<UUID, PlayerInfo>
          - tokensByUserName : HashMap<String, UUID>
          + containsGame()
          + gameEnded()
          + getCurrPlayerColour()
          + getGamePath()
          + getGameUUID()
          {static} + getInstance()
          + getLobbies()
          + getPlayer()
          + getPlayerColour()
          + getUsername()
          + hasPendentGame()
          + isLoggedIn()
          + isPendantGame()
          + isRegistered()
          + isRegistered()
          + registerPlayer()
          + save()
          + setPlayerColour()
          - DatabaseHandler()
          - generateFilePath()
          - initFromFile()
          - overWrite()
          - overwrite()
          - resetFile()
      }
    }
  }
  

  namespace server {
    namespace database {
      enum FileEnum {
        GAME_PATH_BY_UUID
        PLAYER_INFO_BY_TOKEN
        TOKENS_BY_USER_NAME
        filePath
      }
    }
  }
  

  namespace server {
    namespace database {
      class server.database.GameInfo {
          - active : boolean
          - currPlayerIndex : int
          - lastPlayerIndex : int
          - playersTokens : List<UUID>
          + getCurrPlayerIndex()
          + getGame()
          + getLastPlayerIndex()
          + setActive()
          + setCurrPlayerIndex()
          + setGame()
          + setLastPlayerIndex()
          + setPlayersTokens()
          ~ GameInfo()
          ~ GameInfo()
          ~ gameStarted()
          ~ getPlayersTokens()
          ~ isActive()
      }
    }
  }
  

  namespace server {
    namespace database {
      class server.database.PlayerInfo {
          - incompleteGameID : UUID
          - username : String
          + getPcColour()
          + setPcColour()
          ~ PlayerInfo()
          ~ PlayerInfo()
          ~ gameEnded()
          ~ getIncompleteGameID()
          ~ getPlayer()
          ~ getUsername()
          ~ hasPendentGame()
          ~ setIncompleteGameID()
          ~ setPlayer()
          ~ setUsername()
      }
    }
  }
  

  server.database.GameInfo o-- server.model.Game : game
  server.database.PlayerInfo o-- common.enums.PcColourEnum : pcColour
  server.database.PlayerInfo o-- server.controller.Player : player


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
