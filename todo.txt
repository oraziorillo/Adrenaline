GENERAL NOTES:

- i return di oggetti devono restituire cloni

-aggiornare UML

- invece di controllare gli indici nel server.controller lanciamo eccezioni nel server.model che catchiamo nel server.controller

-stabilire quando chiamare il destination checker in targetSelectionState
-additionalDamage and exclusiveOldTargets (teniamo una lista dei target selezionati

-modificare il hasEnoughAmmos
-ricordarsi di aggiungere i target nel shotTargets


ROBA DA CONTROLLER
 - quando la lista di target validi è vuota viene chiamato next state e bisogna ricordarcisi che bisogna controllare la lista dei powerup del current player. se qualcuno è selectedAsAmmo allora dovbiamo metterli a falso

 - discard and Spawn     e     choosePowerUp sono uguali, bisogna unirli
 
 - implementare funzionalita di additional damage and exclusive damage

- considerare l'utilizzo di undo quando è final frenzy and in shootpeopleState seleziona l'arma
 


REGOLE DA IMPLEMENTARE:

- funzione che attribuisce punti dopo una kill (ricordarsi Double kill: - Double kill? If you deal multiple killshots on your turn, you get 1 extra
point. And you are awesome)

-"Choose starting player" 

- Action-hero comment

-power up devono essere usati per effettuare qualsiasi pagamento

-granade launcher ha un effetto che non è propriamente asincrono per come li abbiamo pensati noi


DOMANDE:

- il json va chiuso?

-possiamo usare javatuple?

- aggiungere boolean needParameters per onda d'urto
- vedere meglio il tractor beam 
- aggiungere lista di targets dell'effetto base nel server.controller
- boolean azioni facoltative

-chiedere se si può estrarre l'UML dal codice


ORAZIO:
 - creare la classe mappa
 
ALESSIO: 
 - finire power up
 
 

